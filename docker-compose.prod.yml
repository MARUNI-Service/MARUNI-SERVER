# ===================================
# MARUNI EC2 배포용 Docker Compose
# ===================================
# Docker Hub 방식: 사전 빌드된 이미지 사용
#
# 사용법:
#   docker compose -f docker-compose.prod.yml up -d
#
# 주의사항:
#   1. .env 파일에서 DOCKER_IMAGE 환경변수 설정
#   2. 또는 아래 image 경로를 직접 수정
#   3. EC2에서는 빌드 없이 이미지만 pull

services:
  db:
    image: postgres:15
    container_name: postgres-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: maruni-db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d maruni-db"]
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  app:
    # Docker Hub에서 이미지 pull
    # ⚠️ your-dockerhub-username을 실제 Docker Hub ID로 변경하세요
    image: ${DOCKER_IMAGE:-your-dockerhub-username/maruni-server:latest}
    container_name: maruni-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SWAGGER_SERVER_URL: ${SWAGGER_SERVER_URL:-http://localhost:8080}
    env_file:
      - .env
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  backend:
    driver: bridge
